<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8">
		<title>D3: Adding data points (circles) to the map</title>
		<script type="text/javascript" src="../d3/d3.v3.js"></script>
		<script src="http://labratrevenge.com/d3-tip/javascripts/d3.tip.v0.6.3.js"></script>
		<style type="text/css">
			.d3-tip {
  				line-height: 1.5;
			 	font-size: 6px;
 			 	background: rgba(0, 0, 0, 0.8);
  				color: #fff;
  				border-radius: 2px;
			}	
			.circle:hover {
				color: orange;
				-webkit-transform:scale(2, 2);
			}
		
		</style>
	</head>
	<body>
		<script type="text/javascript">

			//Width and height
			var w = 500;
			var h = 300;

			//Define map projection
			var projection = d3.geo.albersUsa()
								   .translate([w/2, h/2])
								   .scale([500]);

			//Define path generator
			var path = d3.geo.path()
							 .projection(projection);
							 
			//Define quantize scale to sort data values into buckets of color
			var color = d3.scale.quantize()
								.range(["rgb(237,248,233)","rgb(186,228,179)","rgb(116,196,118)","rgb(49,163,84)","rgb(0,109,44)"]);
								//Colors taken from colorbrewer.js, included in the D3 download
			
			var tip = d3.tip()
						.attr('class', 'd3-tip')
						.offset([-10,0])
						.html(function(d) {
								return "Source IP:"+d.Source+
								"<br>"+
								"Destination IP:"+d.Destination;
						})
			//Create SVG element
			var svg = d3.select("body")
						.append("svg")
						.attr("width", w)
						.attr("height", h);
			
			svg.call(tip);

				d3.json("us-states.json", function(json) {

					svg.selectAll("path")
					   .data(json.features)
					   .enter()
					   .append("path")
					   .attr("d", path)
					   .style("fill", "steelblue");

					 var radius = d3.scale.pow()
					 				.range([2,12]);
									.domain([0,10]);
					//Load in cities data
					d3.csv("testdata.csv", function(data) {
						svg.selectAll("circle")
						   .data(data)
						   .enter()
						   .append("circle")
						   .attr("cx", function(d) {
							   return projection([d.SourceLongitude,d.SourceLatitude])[0];
						   })
						   .attr("cy", function(d) {
								return projection([d.SourceLongitude,d.SourceLatitude])[1];
								}) 
						   .attr("r", function(d){
							   return radius(d.Length)
						   .style("fill", "red")
						   .style("opacity", 0.75)
						   .on('mouseover', tip.show)
						   .on('mouseout', tip.hide)
						   });
				});
			
		</script>
	</body>
</html>
